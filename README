0. Introduction

This application retrieves a words pair that can either be synonyms or antonyms, divides them into (almost) equal pieces and mixes them. The user should guess the correct words.

1. Version Info and Supported Operating Systems

Code has been written by using the Qt 5.15.2 framework.

Version 2.1 has recently been "remastered" by being migrated to a CMAKE build system. Also some bugs that were contained in the QMAKE variant have been solved. It has been successfully deployed on Linux but I managed to build and run it on MacOS and Windows as well. Unfortunately due to some errors I haven't managed to deploy it on any of these two systems so Linux continues to remain the "officially" supported OS.

2. Building the app

Pull the code from branch SynAnt_v2.1_CMAKE and build it by using Qt 5.15.2, CMAKE 3.14 (or higher) and a suitable compiler which could be:
- gcc64 on Linux
- MSVC2017-64bit or MINGW-64bit on Windows
- clang64 on MacOS

The Qt version should be exactly the one I mentioned otherwise the results might be unpredictable. For example when using Qt 6.2.1 I had some issues with the UI display. When using Qt 5.13.2 some signal-slot connections were broken due to the fact that the QML Connections with "function on...()" syntax are not supported by this framework version. So if you choose to use another Qt version you might need to do some code changes in order to ensure the application works properly.

3. Deploying the app

This section refers only to Linux builds at the moment.

Once the build is done, the app deployment is necessary for having all required Qt libs added to the app package so it can also run on Linux machines where Qt is not installed. For fulfilling this task I recommend linuxdeployqt due to the simplicity of use and its support both for QMAKE and CMAKE. In the past I compiled the SynAnt application on Fedora28 by using QMAKE (see documentation on other branches) but now I switched to OpenSUSE 15.3 and CMAKE Build System. In both cases linuxdeployqt did its job. To be noted is that you still need a functional QMAKE to run linuxdeployqt even if the application project is built with CMAKE. This should not be an issue if the Qt framework is installed properly.

In order to successfully create the deployable package please follow these steps:
- download linuxdeployqt from this GitHub page: https://github.com/probonopd/linuxdeployqt (check instructions from the page for more details)
- make the downloaded file executable: chmod a+x linuxdeployqt-continuous-x86_64.AppImage
- locate the folder where the qmake executable resides. The directory should have a path similar to this: /path/to/Qt/5.9.2/gcc_64/bin
- add the qmake directory to the $PATH variable: export PATH="/path/to/Qt/5.15.2/gcc_64/bin:$PATH"
- go to another directory and execute qmake -v. You should get following output which shows Qt is installed and configured correctly:

  QMake version 3.1
  Using Qt version 5.9.2 in /path/to/Qt/5.9.2/gcc_64/lib

- build the application as RELEASE
- run the linuxdeployqt as follows: /path/to/linuxdeployqt-continuous-x86_64.AppImage /path/to/builddir/SynAnt -qmldir='/path/to/sourcedir/Application/QML'
- check that the build directory now contains following folders within the Application subdir: lib, plugins, qml
- copy the build directory onto a Linux machine where Qt is not installed and check that it runs successfully (should run exactly the same as on the Qt machine)

Notes:
- the OS where I deployed the app (OpenSUSE 15.3) is a new distribution and linuxdeployqt has a requirement that the deployment is performed onto an older distro to enable backward compatility. This can be overridden by using option -unsupported-allow-new-glibc when running the deploy app. It is not recommended by the linuxdeployqt developers (see linuxdeployqt Github page) however for me it worked just fine. I even tested the resulting SynAnt binary on a Fedora28 system and it worked flawlessly.
- please use this "hack" in case you get an error regarding a missing MySQL library (caused by not finding libmysqlclient.so.18 or similar):
  - go to the sqldrivers directory: cd /path/to/Qt/5.15.2/gcc_64/plugins/sqldrivers
  - move all files EXCEPT libqsqlite.so to a different location, preferably outside Qt. Examples: libqsqlmysql.so, libqsqlpsql.so
  - repeat above mentioned deploy steps and after deployment is done put the moved files back onto their original location (you might still need them!)
- an error might trigger when running linuxdeployqt mentioning that libjasper.so.1 cannot be found. I solved this error by creating a symbolic link (with the before mentioned name) to libjasper.so.4. The symbolic link was placed into the same directory as the libjasper.so.4 file. You can use the locate command (don't forget to execute updatedb as sudo before running it) for finding the libjasper.so files.
- on Windows and MacOS there are two similar deployment tools which unlike linuxdeployqt are by default provided with the Qt distribution: windeployqt and macdeployqt. You can use them for deploying the app on these systems. Unfortunately I haven't managed to do this due to some errors I encountered. Feel free to use these tools if you would like to get a Win/MacOS deployment (maybe you'll be "luckier" than I was). The SynAnt_v2.1 CMAKE version builds and runs on both OSes successfully when using Qt 5.15.2. I tested this on Windows 10 and MacOS 12.0.1 (Monterey).

4. Updating the game data

Starting with version 2.0 the game data is being updated by using a data entry dialog page. This is a significant improvement comparing to previous versions as it is even possible to start the game without having a data file (the user will need to enter at least one word pair so the game can be played), so no more manual (read: text file) updating is required prior to game start. Also the data is stored in a SQLite database, which ensures reliability and maintainability. For more information check the Help dialog after launching the SynAnt app.

Version 2.1 adds multiple languages support regarding entering and using game data. No direct translations of word pairs are provided from one language to the other.

5. Keyboard access

The game can be played either by using the mouse (keyboard is only required for entering the words pair in data entry dialog) or entirely by keyboard. Every button, toggle switch or dropdown has an appropriate shortcut or access key. Further improvement of shortcuts and access keys might occur in the next versions. There is still work to do regarding keyboard focus which might consist in definining multiple focus scopes. For example in order to scroll through the help menu I had to use two shortcuts (ALT + down arrow/up arrow) instead of the arrow keys only. This was necessary due to a keyboard focus conflict with the language selection dropdowns that I was unfortunately not able to solve in the current version. I plan to get this fixed in a future version by performing some re-engineering of the UI software architecture.

6. Further info

Click the Help button within the app for more information. Please note that starting with version 2.0 the help menu is contextual. If accessed from data entry dialog page it provides data entry help topics while when accessing it from the introduction or main page it contains general game help topics.

For questions please feel free to comment on my GitHub page: https://github.com/LiviuCP

Last note: the words "pane", "page" and "dialog" can be used interchangeably into application/README as for the above mentioned stable versions of the game a page contains exactly one pane. This might change in the future versions.